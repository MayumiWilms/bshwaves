function [bag] = dqc_seastate_realtime_v1_2_heave_from_to(incoming_folder, work_folder, outgoing_folder, log_folder, sensor, station, date_from, date_to)

% Real-time quality control tests for heave (DWR, Radac, Radac Single)
% Looks for the timerange date_from to date_to (editable)

% heave: water surface displacement, *.raw / *.txt

% detailed_qc_flag (dqf) contains each test result for every evaluated parameter
% final_qc_flag (fqf) contains the worst (= max) flag from detailed_qc_flag

% flags for real-time data (CMEMS 2017)
% 0 = Not evaluated: Data have not been QC-tested, or the information on quality is not available.
% 1 = Pass: Data have passed critical real-time QC tests and are deemed adequate for use as preliminary data.
% 2 = Probably good data
% 3 = Probably bad data, potentially correctable
% 4 = Fail: Data are considered to have failed one or more critical real-time QC checks. If they are disseminated at all, it should be readily apparent that they are not of acceptable quality.
% 9 = Missing data: Data are missing; used as a placeholder.

% Generated by Mayumi Wilms (mayumi.wilms@bsh.de) on 2021/03/31 08:34:00

%% input information for script 
bag.s_incoming_folder = incoming_folder; % data folder
bag.s_work_folder = work_folder; % meta files folder
bag.s_outgoing_folder = outgoing_folder; % output files folder
bag.s_log_folder = log_folder; % log files folder
bag.s_sensor = upper(sensor); % sensor = 'DWR';
bag.s_station = station; % station = 'BUD';
bag.date_now = datetime('now','TimeZone','UTC');        
bag.date_from = datetime(date_from,'TimeZone','UTC','InputFormat','yyyy-MM-dd HH:mm:ss.SSS');
bag.date_to = datetime(date_to,'TimeZone','UTC','InputFormat','yyyy-MM-dd HH:mm:ss.SSS');
switch upper(bag.s_sensor)
    case 'DWR'     
        bag.date_from_x = bag.date_from;
        bag.date_to_x = bag.date_to;
    
    case {'RADAC', 'RADAC_SINGLE'}
        bag.date_from_x = bag.date_from - minutes(10);
        bag.date_to_x = bag.date_to + minutes(10);
        
    case 'AWAC'
        
    otherwise
        warning('Unexpected sensor type.')     
end

%% check if folder exist
if ~isfolder(bag.s_incoming_folder)
    disp([datestr(bag.date_now) ' Incoming folder ' bag.s_incoming_folder ' does not exist.'])
    return
end

if ~isfolder(bag.s_work_folder)
    disp([datestr(bag.date_now) ' Work folder ' bag.s_work_folder ' does not exist.'])
    return
end

if ~isfolder(bag.s_outgoing_folder)
    disp([datestr(bag.date_now) ' Outgoing folder ' bag.s_outgoing_folder ' does not exist.'])
    return
end

if ~isfolder(fullfile(bag.s_incoming_folder,bag.s_station))
    disp([datestr(bag.date_now) ' Station folder ' fullfile(bag.s_incoming_folder,bag.s_station) ' does not exist.'])
    return
end

%% read metadatabase
s_MetaDatabase = fullfile(bag.s_work_folder,'Metadatenbank.xlsx');
bag.metadatabase = read_metadatabase(s_MetaDatabase,bag.s_sensor);      
   
if isempty(bag.metadatabase)
    disp([datestr(bag.date_now) ' Metadatabase ' s_MetaDatabase ' does not exist.'])
    return    
end

%% parser
switch upper(bag.s_sensor)
    case 'DWR' 
        % parser
        [bag] = parser_dwr_heave(bag);   

    case {'RADAC', 'RADAC_SINGLE'}
        % parser
        [bag] = parser_radac_heave(bag);      
        
    case 'AWAC'        
        
    otherwise
        warning('Unexpected sensor type.')
end

%% Date Test, Test 1
% checks if timestamps in datasets are logical
[bag] = DQC_Test01(bag);

%% Location Test, Test 2
% checks if lat and lon in gps.txt are correct; gps flag is handed over to
% the right timestamp of his, hiw, raw, spt; if a gps flag does not exist
% for a timestamp in his, hiw, raw, spt, the flag is 9 = missing value (for
% this timestamp)
[bag] = DQC_Test02(bag);

%% Completeness Test, Test 3
% checks for missing values in datasets, for raw and spt flags are computed
% when raw and spt are imported
[bag] = DQC_Test03(bag);
    
%%
bag.Table_despiked = timetable;
for I2 = 1:1:height(bag.Table_RAW_dqf_03)
    if bag.Table_RAW_dqf_03.dqf_03_compl_raw(I2) == 1        
        switch upper(bag.s_sensor)
            case 'DWR'
                bag.Table_RAW_temp = bag.Table_RAW(timerange(bag.Table_RAW_dqf_03.Time(I2), bag.Table_RAW_dqf_03.Time(I2) + minutes(30) - seconds(1/1.28),'closed'),:); % select 30-min intervals  
                %%{
                if bag.Table_RAW_temp.Time(end) - bag.Table_RAW_temp.Time(1) < duration([00 29 00]) % if-statement to catch wrongly created bag.Table_RAW_temp
                    warning('Wrong bag.Table_RAW_temp!');
                    disp(['' num2str(I2) ', '  datestr(bag.Table_RAW_temp.Time(1)) ', ' string(bag.Table_RAW_temp.Time(end) - bag.Table_RAW_temp.Time(1),'hh:mm:ss') ])
                    continue
                end    
                %}

            case {'RADAC', 'RADAC_SINGLE'}
                bag.Table_RAW_temp = bag.Table_RAW(timerange(bag.Table_RAW_dqf_03.Time(I2) - minutes(10), bag.Table_RAW_dqf_03.Time(I2) + minutes(10),'openright'),:); % select 20-min intervals  
                %%{
                if bag.Table_RAW_temp.Time(end) - bag.Table_RAW_temp.Time(1) < duration([00 19 00]) % if-statement to catch wrongly created bag.Table_RAW_temp
                    warning('Wrong bag.Table_RAW_temp!');
                    disp(['' num2str(I2) ', '  datestr(bag.Table_RAW_temp.Time(1)) ', ' string(bag.Table_RAW_temp.Time(end) - bag.Table_RAW_temp.Time(1),'hh:mm:ss') ])
                    continue
                end    
                %}

            case 'AWAC'

            otherwise
                warning('Unexpected sensor type.')     
        end

        %% Spike Test, Test 4          
        % QARTOD, ST Time Series Spike (Test 10)
        [bag] = DQC_Test04(bag,I2);

        %% Range Test, Test 5
        % QARTOD, ST Time Series Range (Test 11)
        % checks if values are within instrument and value ranges  
        [bag] = DQC_Test05(bag,I2); 

        %% Flat Line Test, Test 6
        % Christou & Ewans (2014)
        % checks for flat lines; if 10 successive identical values, flag = 3
        [bag] = DQC_Test06(bag,I2);

        %% Gradient Test, Test 7
        % checks for too steep slopes; if |grad(heave)| > 6 m/s, flag = 3
        [bag] = DQC_Test07(bag,I2);   

        %% Offset Test, Test 8
        % QARTOD ST Time Series Segment Shift (Test 12)
        [bag] = DQC_Test08(bag,I2);   

        %% Wandering Mean Test, Test 9
        % Christou & Ewans (2014)
        % Test checks for wandering means in time series, i.e. intervals
        % between successive period upcrossings that exceed 25 s
        [bag] = DQC_Test09(bag,I2);   

        %% Status Test, Test 10
        % checks status in .raw; "00" = correct, "01" = transmission error,
        % repaired
        [bag] = DQC_Test10(bag,I2);   

        bag = rmfield(bag,'Table_RAW_temp');
    
    else
        % tests could not be evaluated because dqf_03_compl_raw = 4
        bag.Table_RAW_qc0.dqf_heave_04(I2) = 0; 
        bag.Table_RAW_qc0.dqf_heave_05(I2) = 0;
        bag.Table_RAW_qc0.dqf_heave_06(I2) = 0;
        bag.Table_RAW_qc0.dqf_heave_07(I2) = 0; 
        bag.Table_RAW_qc0.dqf_heave_08(I2) = 0;
        bag.Table_RAW_qc0.dqf_heave_09(I2) = 0;
        bag.Table_RAW_qc0.dqf_heave_10(I2) = 0;
    end   
end; clear I2

%% despiked
switch upper(bag.s_sensor)
    case 'DWR' 
        bag.Table_RAW.despiked = bag.Table_despiked.despiked;         

    case {'RADAC', 'RADAC_SINGLE'}
        
    case 'AWAC'        
        
    otherwise
        warning('Unexpected sensor type.')
end
bag = rmfield(bag,'Table_despiked');

%% final qc
% the order in detailed_qc_flag is essential because the position of
% the flags indicates the test number for which the flag is the result.
% therefore the timetable variables have to be sorted to make sure the
% order is right.
[bag] = DQC_FinalQC_from_to(bag);

%% format tables to specific format 
[bag] = DQC_Formatting(bag);

%% writetable
% writes the qc results (timestamp, detailed_qc_flag, final_qc_flag) in a
% text file.
[bag] = DQC_writetable_from_to(bag);

disp([datestr(bag.date_now) ' Data quality control for station ' bag.s_station ' (' bag.s_sensor ') was successful.'])

return